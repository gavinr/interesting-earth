import{ca as W,eh as v,bB as T,ch as B,dW as D,hT as F,hU as Q,b3 as V,co as Y,dx as _,bY as P,hV as O,ak as z,cQ as E,aq as G}from"./index-4b03b1b0.js";import{r as A,o as I,i as R,s as X}from"./normalizeUtilsCommon-a78292a0.js";async function H(t,s,c,n){const e=W(t),f=s[0].spatialReference,a={...n,query:{...e.query,f:"json",sr:JSON.stringify(f),target:JSON.stringify({geometryType:v(s[0]),geometries:s}),cutter:JSON.stringify(c)}},o=await T(e.path+"/cut",a),{cutIndexes:u,geometries:y=[]}=o.data;return{cutIndexes:u,geometries:y.map(h=>{const x=B(h);return x.spatialReference=f,x})}}async function K(t,s,c){const n=typeof t=="string"?D(t):t,e=s[0].spatialReference,f=v(s[0]),a={...c,query:{...n.query,f:"json",sr:e.wkid??JSON.stringify(e),geometries:JSON.stringify(F(s))}},{data:o}=await T(n.path+"/simplify",a);return Q(o.geometries,f,e)}const C=V.getLogger("esri.geometry.support.normalizeUtils");function Z(t){return t.type==="polygon"}function tt(t){return t[0].type==="polygon"}function et(t){return t[0].type==="polyline"}function st(t,s){if(!(t instanceof P||t instanceof z)){const e="straightLineDensify: the input geometry is neither polyline nor polygon";throw C.error(e),new G(e)}const c=I(t),n=[];for(const e of c){const f=[];n.push(f),f.push([e[0][0],e[0][1]]);for(let a=0;a<e.length-1;a++){const o=e[a][0],u=e[a][1],y=e[a+1][0],h=e[a+1][1],x=Math.sqrt((y-o)*(y-o)+(h-u)*(h-u)),l=(h-u)/x,m=(y-o)/x,p=x/s;if(p>1){for(let b=1;b<=p-1;b++){const S=b*s,r=m*S+o,i=l*S+u;f.push([r,i])}const w=(x+Math.floor(p-1)*s)/2,j=m*w+o,J=l*w+u;f.push([j,J])}f.push([y,h])}}return Z(t)?new z({rings:n,spatialReference:t.spatialReference}):new P({paths:n,spatialReference:t.spatialReference})}function U(t,s,c){if(s){const n=st(t,1e6);t=E(n,!0)}return c&&(t=X(t,c)),t}function k(t,s,c){if(Array.isArray(t)){const n=t[0];if(n>s){const e=R(n,s);t[0]=n+e*(-2*s)}else if(n<c){const e=R(n,c);t[0]=n+e*(-2*c)}}else{const n=t.x;if(n>s){const e=R(n,s);t=t.clone().offset(e*(-2*s),0)}else if(n<c){const e=R(n,c);t=t.clone().offset(e*(-2*c),0)}}return t}function nt(t,s){let c=-1;for(let n=0;n<s.cutIndexes.length;n++){const e=s.cutIndexes[n],f=s.geometries[n],a=I(f);for(let o=0;o<a.length;o++){const u=a[o];u.some(y=>{if(y[0]<180)return!0;{let h=0;for(let l=0;l<u.length;l++){const m=u[l][0];h=m>h?m:h}h=Number(h.toFixed(9));const x=-360*R(h,180);for(let l=0;l<u.length;l++){const m=f.getPoint(o,l);f.setPoint(o,l,m.clone().offset(x,0))}return!0}})}if(e===c){if(tt(t))for(const o of I(f))t[e]=t[e].addRing(o);else if(et(t))for(const o of I(f))t[e]=t[e].addPath(o)}else c=e,t[e]=f}return t}async function ot(t,s,c){if(!Array.isArray(t))return ot([t],s);s&&typeof s!="string"&&C.warn("normalizeCentralMeridian()","The url object is deprecated, use the url string instead");const n=typeof s=="string"?s:(s==null?void 0:s.url)??Y.geometryServiceUrl;let e,f,a,o,u,y,h,x,l=0;const m=[],p=[];for(const r of t)if(r!=null)if(e||(e=r.spatialReference,f=_(e),a=e.isWebMercator,y=a?102100:4326,o=A[y].maxX,u=A[y].minX,h=A[y].plus180Line,x=A[y].minus180Line),f)if(r.type==="mesh")p.push(r);else if(r.type==="point")p.push(k(r.clone(),o,u));else if(r.type==="multipoint"){const i=r.clone();i.points=i.points.map(g=>k(g,o,u)),p.push(i)}else if(r.type==="extent"){const i=r.clone()._normalize(!1,!1,f);p.push(i.rings?new z(i):i)}else if(r.extent){const i=r.extent,g=R(i.xmin,u)*(2*o);let d=g===0?r.clone():X(r.clone(),g);i.offset(g,0),i.intersects(h)&&i.xmax!==o?(l=i.xmax>l?i.xmax:l,d=U(d,a),m.push(d),p.push("cut")):i.intersects(x)&&i.xmin!==u?(l=i.xmax*(2*o)>l?i.xmax*(2*o):l,d=U(d,a,360),m.push(d),p.push("cut")):p.push(d)}else p.push(r.clone());else p.push(r);else p.push(r);let w=R(l,o),j=-90;const J=w,b=new P;for(;w>0;){const r=360*w-180;b.addPath([[r,j],[r,-1*j]]),j*=-1,w--}if(m.length>0&&J>0){const r=nt(m,await H(n,m,b,c)),i=[],g=[];for(let $=0;$<p.length;$++){const q=p[$];if(q!=="cut")g.push(q);else{const N=r.shift(),L=t[$];L!=null&&L.type==="polygon"&&L.rings&&L.rings.length>1&&N.rings.length>=L.rings.length?(i.push(N),g.push("simplify")):g.push(a?O(N):N)}}if(!i.length)return g;const d=await K(n,i,c),M=[];for(let $=0;$<g.length;$++){const q=g[$];q!=="simplify"?M.push(q):M.push(a?O(d.shift()):d.shift())}return M}const S=[];for(let r=0;r<p.length;r++){const i=p[r];if(i!=="cut")S.push(i);else{const g=m.shift();S.push(a===!0?O(g):g)}}return S}export{ot as b};
