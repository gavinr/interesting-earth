import{b3 as x,aH as y,eT as E,aq as n,eU as L,eV as K,cl as F,cs as R,cj as j,eW as D}from"./index-4b03b1b0.js";import{i as f}from"./originUtils-1469eeaf.js";import{B as q}from"./FeatureLayer-7c5e0432.js";import{r as U}from"./fetchService-0e9cd09b.js";import{o as w}from"./jsonContext-b54dc638.js";import{i as c,a as z,u as I,l as m}from"./portalItemUtils-89a0d48a.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./UniqueValueRenderer-ad13318a.js";import"./ColorStop-0686847d.js";import"./diffUtils-3c37f4e6.js";import"./colorRamps-54548a9c.js";import"./jsonUtils-dc7d3627.js";import"./DictionaryLoader-b0bde137.js";import"./FieldsIndex-06c42f48.js";import"./heatmapUtils-fe1f2bfa.js";import"./MultiOriginJSONSupport-d720758b.js";import"./sql-a39124b8.js";import"./FeatureLayerBase-43dae5ea.js";import"./commonProperties-1e64caff.js";import"./ElevationInfo-f714f054.js";import"./featureLayerUtils-ce39121a.js";import"./AttachmentQuery-dd62ce87.js";import"./Query-cdee9722.js";import"./RelationshipQuery-ab8c76dd.js";import"./serviceCapabilitiesUtils-8d66cffa.js";import"./queryZScale-2a8227ea.js";import"./FeatureSet-d4d9321c.js";import"./APIKeyMixin-be880531.js";import"./ArcGISService-163e63f0.js";import"./BlendLayer-08a76f1b.js";import"./jsonUtils-555359b4.js";import"./CustomParametersMixin-64be6818.js";import"./FeatureEffectLayer-142ba535.js";import"./FeatureEffect-82bb4002.js";import"./FeatureFilter-e71c77dc.js";import"./FeatureReductionLayer-b84a7e30.js";import"./LabelClass-3b8bddeb.js";import"./defaults-d003668a.js";import"./defaultsJSON-59981e75.js";import"./OperationalLayer-5b164959.js";import"./OrderedLayer-908cb5be.js";import"./PortalLayer-473e8b12.js";import"./ScaleRangeLayer-31eefac8.js";import"./TemporalLayer-5e4b9999.js";import"./FeatureTemplate-0db006f4.js";import"./FeatureType-e95921de.js";import"./fieldProperties-ff8bee5a.js";import"./labelingInfo-66d1a5d0.js";import"./versionUtils-9472ade8.js";import"./styleUtils-5fb07ac6.js";import"./TopFeaturesQuery-da745a52.js";import"./popupUtils-8d4c7bed.js";const B=x.getLogger("esri.layers.FeatureLayer"),d="Feature Service";function u(a,t){return`Layer (title: ${a.title}, id: ${a.id}) of type '${a.declaredClass}' ${t}`}function g(a,t){if(t.type!==d)throw new n("feature-layer:portal-item-wrong-type",u(a,`should have portal item of type "${d}"`))}async function A(a){if(await a.load(),E(a))throw new n("feature-layer:save",u(a,"using an in-memory source cannot be saved to a portal item"))}function M(a,t){let e=(a.messages??[]).filter(({type:r})=>r==="error").map(({name:r,message:s,details:o})=>new n(r,s,o));if(t!=null&&t.ignoreUnsupported&&(e=e.filter(({name:r})=>r!=="layer:unsupported"&&r!=="symbol:unsupported"&&r!=="symbol-layer:unsupported"&&r!=="property:unsupported"&&r!=="url:unsupported")),e.length>0)throw new n("feature-layer:save","Failed to save feature layer due to unsupported or invalid content. See 'details.errors' for more detailed information",{errors:e})}async function v(a,t,e){"beforeSave"in a&&typeof a.beforeSave=="function"&&await a.beforeSave();const r=a.write({},t);return M(t,e),r}function J(a){const{layer:t,layerJSON:e}=a;return t.isTable?{layers:[],tables:[e]}:{layers:[e],tables:[]}}function h(a){c(a,m.JSAPI),a.typeKeywords&&(a.typeKeywords=a.typeKeywords.filter((t,e,r)=>r.indexOf(t)===e))}function Y(a){const t=a.portalItem;if(!t)throw B.error("save: requires the portalItem property to be set"),new n("feature-layer:portal-item-not-set",u(a,"requires the portalItem property to be set"));if(!t.loaded)throw new n("feature-layer:portal-item-not-loaded",u(a,"cannot be saved to a portal item that does not exist or is inaccessible"));g(a,t)}async function N(a,t){return/\/\d+\/?$/.test(a.url??"")?J(t[0]):_(a,t)}async function _(a,t){const{layer:{url:e,customParameters:r,apiKey:s}}=t[0];let o=await a.fetchData("json");o&&o.layers!=null&&o.tables!=null||(o=await C(o,{url:e??"",customParameters:r,apiKey:s},t.map(i=>i.layer.layerId)));for(const i of t)O(i.layer,i.layerJSON,o);return o}async function C(a,t,e){a||(a={}),a.layers||(a.layers=[]),a.tables||(a.tables=[]);const{url:r,customParameters:s,apiKey:o}=t,{serviceJSON:i,layersJSON:l}=await U(r,{customParameters:s,apiKey:o}),p=S(a.layers,i.layers,e),b=S(a.tables,i.tables,e);a.layers=p.itemResources,a.tables=b.itemResources;const T=[...p.added,...b.added],P=l?[...l.layers,...l.tables]:[];return await k(a,T,r,P),a}function S(a,t,e){const r=L(a,t,(o,i)=>o.id===i.id);a=a.filter(o=>!r.removed.some(i=>i.id===o.id));const s=r.added.map(({id:o})=>({id:o}));return s.forEach(({id:o})=>{a.push({id:o})}),{itemResources:a,added:s.filter(({id:o})=>!e.includes(o))}}async function k(a,t,e,r){const s=t.map(({id:o})=>new q({url:e,layerId:o,sourceJSON:r.find(({id:i})=>i===o)}));await K(s.map(o=>o.load())),s.forEach(o=>{const{layerId:i,loaded:l,defaultPopupTemplate:p}=o;!l||p==null||O(o,{id:i,popupInfo:p.toJSON()},a)})}function O(a,t,e){a.isTable?$(e.tables,t):$(e.layers,t)}function $(a,t){if(!a)return;const e=a.findIndex(({id:r})=>r===t.id);e===-1?a.push(t):a[e]=t}function G(a){const{portalItem:t}=a;return D(a)&&!a.dynamicDataSource&&!!(t!=null&&t.loaded)&&t.type===d}async function H(a){if(!(a!=null&&a.length))throw new n("feature-layer-utils-saveall:missing-parameters","'layers' array should contain at least one feature layer");await Promise.all(a.map(r=>r.load()));for(const r of a)if(!G(r))throw new n("feature-layer-utils-saveall:invalid-parameters",`'layers' array should only contain layers or tables in a feature service loaded from 'Feature Service' item. ${u(r,"does not conform")}`,{layer:r});const t=a.map(r=>r.portalItem.id);if(new Set(t).size>1)throw new n("feature-layer-utils-saveall:invalid-parameters","All layers in the 'layers' array should be loaded from the same portal item");const e=a.map(r=>r.layerId);if(new Set(e).size!==e.length)throw new n("feature-layer-utils-saveall:invalid-parameters","'layers' array should contain only one instance each of layer or table in a feature service")}function V(a,t){let e=F.from(t);return e.id&&(e=e.clone(),e.id=null),e.type??(e.type=d),e.portal??(e.portal=R.getDefault()),g(a,e),e}async function W(a,t){const{url:e,layerId:r,title:s,fullExtent:o,isTable:i}=a,l=j(e),p=l!=null&&l.serverType==="FeatureServer";t.url=p?e:`${e}/${r}`,t.title||(t.title=s),t.extent=null,i||o==null||(t.extent=await z(o)),I(t,m.METADATA),I(t,m.MULTI_LAYER),c(t,m.SINGLE_LAYER),i&&c(t,m.TABLE),h(t)}async function Q(a,t,e){var s;const r=a.portal;await(r==null?void 0:r.signIn()),await((s=r==null?void 0:r.user)==null?void 0:s.addItem({item:a,data:t,folder:e==null?void 0:e.folder}))}const Xa=y(X);async function X(a,t){await A(a),Y(a);const e=a.portalItem,r=w(e),s=await v(a,r,t),o=await N(e,[{layer:a,layerJSON:s}]);return h(e),await e.update({data:o}),f(r),e}const Za=y(async(a,t)=>{await H(a);const e=a[0].portalItem,r=w(e),s=await Promise.all(a.map(i=>v(i,r,t))),o=await N(e,a.map((i,l)=>({layer:i,layerJSON:s[l]})));return h(e),await e.update({data:o}),await Promise.all(a.slice(1).map(i=>i.portalItem.reload())),f(r),e.clone()}),at=y(Z);async function Z(a,t,e){await A(a);const r=V(a,t),s=w(r),o=J({layer:a,layerJSON:await v(a,s,e)});return await W(a,r),await Q(r,o,e),a.portalItem=r,f(s),r}export{Xa as save,Za as saveAll,at as saveAs};
