import{b3 as m,aF as _,aq as p,dt as u,dD as c}from"./index-4b03b1b0.js";import{z as y,v as f,n as w}from"./QueryEngine-75e718c4.js";import{b as I}from"./Query-cdee9722.js";import{I as b}from"./Pipeline-2bd66142.js";import"./normalizeUtils-1bd513d6.js";import"./normalizeUtilsCommon-a78292a0.js";import"./WhereClause-40a2a5ab.js";import"./executionError-c92d3b85.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-42e44ded.js";import"./utils-d3077f8c.js";import"./generateRendererUtils-77922da6.js";import"./FieldsIndex-06c42f48.js";import"./StreamFeatureManager-140d5c90.js";import"./quickselect-70c375a5.js";import"./diffUtils-3c37f4e6.js";import"./arcadeTimeUtils-cf7e2dfd.js";import"./centroid-8e8cfa47.js";import"./ogcFeatureUtils-81a58dfc.js";import"./geojson-5528191c.js";import"./clientSideDefaults-76ae825d.js";import"./defaultsJSON-59981e75.js";import"./query-af06498b.js";import"./pbfQueryUtils-8c741d64.js";import"./pbf-18997bde.js";import"./queryZScale-2a8227ea.js";import"./createConnection-cea53b95.js";import"./definitions-bc94d273.js";import"./TileInfoView-b5d908d2.js";import"./number-e491b09e.js";import"./geohashUtils-77d8429b.js";const d=m.getLogger("esri.views.2d.layers.features.support.whereUtils"),T={getAttribute:(r,t)=>r.field(t)};async function g(r,t){const e=await _(()=>import("./WhereClause-40a2a5ab.js").then(i=>i.W),["./WhereClause-40a2a5ab.js","./index-4b03b1b0.js","./index-0de4b476.css","./executionError-c92d3b85.js"],import.meta.url);try{const i=e.WhereClause.create(r,t);if(!i.isStandardized){const s=new p("mapview - bad input","Unable to apply filter's definition expression, as expression is not standardized.",i);d.error(s)}return s=>{const n=s.readArcadeFeature();return i.testFeature(n,T)}}catch{return d.warn("mapview-bad-where-clause","Encountered an error when evaluating where clause",r),s=>!0}}const a=1,v=2;class et{constructor(t){this._geometryBounds=u(),this._idToVisibility=new Map,this._serviceInfo=t}get hash(){return this._hash}check(t){return this._applyFilter(t)}clear(){const t=this._resetAllHiddenIds();return this.update(),{show:t,hide:[]}}invalidate(){this._idToVisibility.forEach((t,e)=>{this._idToVisibility.set(e,0)})}setKnownIds(t){for(const e of t)this._idToVisibility.set(e,a)}setTrue(t){const e=[],i=[],s=new Set(t);return this._idToVisibility.forEach((n,o)=>{const l=!!(this._idToVisibility.get(o)&a),h=s.has(o);!l&&h?e.push(o):l&&!h&&i.push(o),this._idToVisibility.set(o,h?a|v:0)}),{show:e,hide:i}}createQuery(){const{geometry:t,spatialRel:e,where:i,timeExtent:s,objectIds:n}=this;return I.fromJSON({geometry:t,spatialRel:e,where:i,timeExtent:s,objectIds:n})}async update(t,e){this._hash=JSON.stringify(t);const i=await y(t,null,e);await Promise.all([this._setGeometryFilter(i),this._setIdFilter(i),this._setAttributeFilter(i),this._setTimeFilter(i)])}async _setAttributeFilter(t){if(!t||!t.where)return this._clause=null,void(this.where=null);this._clause=await g(t.where,this._serviceInfo.fieldsIndex),this.where=t.where}_setIdFilter(t){this._idsToShow=t&&t.objectIds&&new Set(t.objectIds),this._idsToHide=t&&t.hiddenIds&&new Set(t.hiddenIds),this.objectIds=t&&t.objectIds}async _setGeometryFilter(t){if(!t||!t.geometry)return this._spatialQueryOperator=null,this.geometry=null,void(this.spatialRel=null);const e=t.geometry,i=t.spatialRel||"esriSpatialRelIntersects",s=await f(i,e,this._serviceInfo.geometryType,this._serviceInfo.hasZ,this._serviceInfo.hasM);c(this._geometryBounds,e),this._spatialQueryOperator=s,this.geometry=e,this.spatialRel=i}_setTimeFilter(t){if(this.timeExtent=this._timeOperator=null,t&&t.timeExtent)if(this._serviceInfo.timeInfo)this.timeExtent=t.timeExtent,this._timeOperator=w(this._serviceInfo.timeInfo,t.timeExtent,b);else{const e=new p("feature-layer-view:time-filter-not-available","Unable to apply time filter, as layer doesn't have time metadata.",t.timeExtent);m.getLogger("esri.views.2d.layers.features.controllers.FeatureFilter").error(e)}}_applyFilter(t){return this._filterByGeometry(t)&&this._filterById(t)&&this._filterByTime(t)&&this._filterByExpression(t)}_filterByExpression(t){return!this.where||this._clause(t)}_filterById(t){return(!this._idsToHide||!this._idsToHide.size||!this._idsToHide.has(t.getObjectId()))&&(!this._idsToShow||!this._idsToShow.size||this._idsToShow.has(t.getObjectId()))}_filterByGeometry(t){if(!this.geometry)return!0;const e=t.readHydratedGeometry();return!!e&&this._spatialQueryOperator(e)}_filterByTime(t){return this._timeOperator==null||this._timeOperator(t)}_resetAllHiddenIds(){const t=[];return this._idToVisibility.forEach((e,i)=>{e&a||(this._idToVisibility.set(i,a),t.push(i))}),t}}export{et as default};
