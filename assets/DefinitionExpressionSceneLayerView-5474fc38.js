import{ai as o,aj as a,al as p,b3 as t}from"./index-4b03b1b0.js";import{f as d}from"./WhereClause-40a2a5ab.js";import{r as l}from"./I3SUtil-8ed72294.js";const h="updating";function x(s){return s==="updating"?null:s}function g(s){return s==="updating"}const c=s=>{let n=class extends s{constructor(){super(...arguments),this._definitionExpressionErrors=0,this._maxDefinitionExpressionErrors=20,this.logError=i=>{this._definitionExpressionErrors<this._maxDefinitionExpressionErrors&&t.getLogger(this).error("Error while evaluating definitionExpression: "+i),this._definitionExpressionErrors++,this._definitionExpressionErrors===this._maxDefinitionExpressionErrors&&t.getLogger(this).error("Further errors are ignored")}}get parsedDefinitionExpression(){if(!this.i3slayer||!this.i3slayer.definitionExpression)return null;try{const i=d.create(this.i3slayer.definitionExpression,this.i3slayer.fieldsIndex);if(!i.isStandardized)return t.getLogger(this).error("definitionExpression is using non standard function"),null;const e=[],r=i.fieldNames;return l(r,this.i3slayer.fields,{missingFields:e}),e.length>0?(t.getLogger(this).error(`definitionExpression references unknown fields: ${e.join(", ")}`),null):(this._definitionExpressionErrors=0,i)}catch(i){return t.getLogger(this).error("Failed to parse definitionExpression: "+i),null}}get definitionExpressionFields(){return this.parsedDefinitionExpression?this.parsedDefinitionExpression.fieldNames:[]}_evaluateClause(i,e){try{return i.testFeature(e)}catch(r){return this.logError(r),!1}}_addDefinitionExpressionToQuery(i){if(!this.parsedDefinitionExpression)return i;const e=this.i3slayer.definitionExpression,r=i.clone();return r.where?r.where=`(${e}) AND (${r.where})`:r.where=e,r}};return o([a()],n.prototype,"i3slayer",void 0),o([a({readOnly:!0})],n.prototype,"parsedDefinitionExpression",null),o([a({readOnly:!0})],n.prototype,"definitionExpressionFields",null),n=o([p("esri.views.3d.layers.support.DefinitionExpressionSceneLayerView")],n),n};export{x as a,h as n,c as t,g as u};
