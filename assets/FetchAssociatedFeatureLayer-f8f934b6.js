import{bB as c,cr as f,cn as u,cl as p,cs as g}from"./index-4b03b1b0.js";import{B as y}from"./FeatureLayer-7c5e0432.js";class P{constructor(t,r,e,s){var n;this._parsedUrl=t,this._portalItem=r,this._apiKey=e,this.signal=s,this._rootDocument=null;const a=(n=this._parsedUrl)==null?void 0:n.path.match(/^(.*)\/SceneServer\/layers\/([\d]*)\/?$/i);a&&(this._urlParts={root:a[1],layerId:parseInt(a[2],10)})}async fetch(){if(!this._urlParts)return null;const t=this._portalItem??await this._portalItemFromServiceItemId();if(t==null)return this._loadFromUrl();const r=await this._findAndLoadRelatedPortalItem(t);return r==null?null:this._loadFeatureLayerFromPortalItem(r)}async fetchPortalItem(){if(!this._urlParts)return null;const t=this._portalItem??await this._portalItemFromServiceItemId();return t==null?null:this._findAndLoadRelatedPortalItem(t)}async _fetchRootDocument(){if(this._rootDocument!=null)return this._rootDocument;if(this._urlParts==null)return this._rootDocument={},{};const t={query:{f:"json",token:this._apiKey},responseType:"json",signal:this.signal},r=`${this._urlParts.root}/SceneServer`;try{const e=await c(r,t);this._rootDocument=e.data}catch{this._rootDocument={}}return this._rootDocument}async _fetchServiceOwningPortalUrl(){var s,a;const t=(s=this._parsedUrl)==null?void 0:s.path,r=t?(a=f)==null?void 0:a.findServerInfo(t):null;if(r!=null&&r.owningSystemUrl)return r.owningSystemUrl;const e=t?t.replace(/(.*\/rest)\/.*/i,"$1")+"/info":null;try{const n=(await c(e,{query:{f:"json"},responseType:"json",signal:this.signal})).data.owningSystemUrl;if(n)return n}catch(n){u(n)}return null}async _findAndLoadRelatedPortalItem(t){try{return(await t.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},{signal:this.signal})).find(r=>r.type==="Feature Service")||null}catch(r){return u(r),null}}async _loadFeatureLayerFromPortalItem(t){await t.load({signal:this.signal});const r=await this._findMatchingAssociatedSublayerUrl(t.url??"");return new y({url:r,portalItem:t}).load({signal:this.signal})}async _loadFromUrl(){var r;const t=await this._findMatchingAssociatedSublayerUrl(`${(r=this._urlParts)==null?void 0:r.root}/FeatureServer`);return new y({url:t}).load({signal:this.signal})}async _findMatchingAssociatedSublayerUrl(t){var m;const r=t.replace(/^(.*FeatureServer)(\/[\d]*\/?)?$/i,"$1"),e=(m=this._urlParts)==null?void 0:m.layerId,s=this._fetchRootDocument(),a=i=>{const _={query:{f:"json"},responseType:"json",authMode:i,signal:this.signal};return c(r,_)},n=a("anonymous").catch(()=>a("no-prompt")),[h,d]=await Promise.all([n,s]),o=d&&d.layers,l=h.data&&h.data.layers;if(!Array.isArray(l))throw new Error("expected layers array");if(Array.isArray(o)){for(let i=0;i<Math.min(o.length,l.length);i++)if(o[i].id===e)return`${r}/${l[i].id}`}else if(e!=null&&e<l.length)return`${r}/${l[e].id}`;throw new Error("could not find matching associated sublayer")}async _portalItemFromServiceItemId(){const t=(await this._fetchRootDocument()).serviceItemId;if(!t)return null;const r=new p({id:t,apiKey:this._apiKey}),e=await this._fetchServiceOwningPortalUrl();e!=null&&(r.portal=new g({url:e}));try{return r.load({signal:this.signal})}catch(s){return u(s),null}}}export{P as i};
